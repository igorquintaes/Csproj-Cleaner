<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>Sobre</value>
  </data>
  <data name="AboutSourceCodeIn" xml:space="preserve">
    <value>Project Cleaner é um projeto Open Source. Toda a aplicação e seu respectivo código fonde pode ser encontrado em:</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="CleanProjects" xml:space="preserve">
    <value>Executar Limpeza!</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Fechar</value>
  </data>
  <data name="ErrorExceptionVerifyLog" xml:space="preserve">
    <value>Erro. Verifique o log para mais informações.</value>
  </data>
  <data name="ErrorFolderExceptionVerifyLog" xml:space="preserve">
    <value>Erro (ReadFolderException). Verifique o log para mais informações.</value>
  </data>
  <data name="ErrorLogExceptionInitialize" xml:space="preserve">
    <value>Erro ao instanciar log de erros:</value>
  </data>
  <data name="ExtensionsToClear" xml:space="preserve">
    <value>Extensões para limpeza:</value>
  </data>
  <data name="FinishedClickToRunAgain" xml:space="preserve">
    <value>Concluído. Clique para executar novamente.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Ajuda</value>
  </data>
  <data name="InvalidLogFolder" xml:space="preserve">
    <value>O diretório de logs não existe. Por favor, selecione um diretório válido.</value>
  </data>
  <data name="InvalidProjectFolder" xml:space="preserve">
    <value>O diretório de projetos não existe. Por favor, selecione um diretório válido.</value>
  </data>
  <data name="LanguageStr" xml:space="preserve">
    <value>Idioma:</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Carregando...</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Salvar</value>
  </data>
  <data name="Saved" xml:space="preserve">
    <value>Salvo</value>
  </data>
  <data name="SaveLogDir" xml:space="preserve">
    <value>Diretório da pasta de armazenamento de logs:</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Configurações</value>
  </data>
  <data name="Steps" xml:space="preserve">
    <value>Procedimentos:</value>
  </data>
  <data name="StepsDescription" xml:space="preserve">
    <value>Insira um diretório válido para que todos os arquivos de projeto dentro dele ou de suas subpastas sejam limpos. A limpeza iniciará assim que o botão "Executar Limpeza!" for clicado.</value>
  </data>
  <data name="SuccefullSavedConfig" xml:space="preserve">
    <value>Sua configuração foi salva com sucesso!</value>
  </data>
  <data name="TargetFolder" xml:space="preserve">
    <value>Diretório de execução:</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>Ferramentas</value>
  </data>
  <data name="VerifyIfAllDirsAreFilled" xml:space="preserve">
    <value>Verifique se todos os diretórios foram preenchidos.</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Atenção!</value>
  </data>
  <data name="NonExistentFiles" xml:space="preserve">
    <value>Arquivos inexistentes:</value>
  </data>
  <data name="NonExistentFilesActionLog" xml:space="preserve">
    <value>Salvar em log</value>
  </data>
  <data name="NonExistentFilesActionLogAndDelete" xml:space="preserve">
    <value>Salvar em log e deletar referências</value>
  </data>
  <data name="NonExistentFilesActionNothing" xml:space="preserve">
    <value>Sem ação</value>
  </data>
  <data name="WarningNonExistentFiles" xml:space="preserve">
    <value>Atenção! Esta opção fará o programa rodar devagar!</value>
  </data>
</root>